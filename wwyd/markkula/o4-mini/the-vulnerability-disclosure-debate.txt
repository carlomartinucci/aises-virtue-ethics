I’m the lead vulnerability researcher on this project. Here’s exactly what I’d do:

1. Within four hours of discovering the Windows hole, open a dedicated, encrypted Slack channel (or Signal group) with Microsoft’s Security Response Center (MSRC) contacts.  
2. Post in that channel:  
   • A concise write-up of the bug’s root cause (buffer-overflow in kernel driver X)  
   • A proof-of-concept executable (packed and password-protected, password shared via separate e-mail)  
   • A suggested patch strategy (e.g. “Bounds-check the input stream in DriverEntry before memcpy.”)  
3. Propose a fixed disclosure date: the next Patch Tuesday (two weeks out) at 10:00 AM Pacific, allowing Microsoft exactly 14 days to code, test, and stage the hot-fix.  
4. Within 24 hrs, if I haven’t heard back, escalate: call the published MSRC hotline, reference my original Slack thread, and request a read receipt.  
5. As soon as Microsoft confirms a candidate patch build, set up a joint test session:  
   • I’ll provide my exploit binary; they’ll run it against build #12345 in a shared Azure VM.  
   • We’ll log success/failure, iterate on the patch until the exploit no longer works.  
6. Once they verify the patch blocks the exploit, I’ll draft a public advisory with:  
   • Technical details of vulnerability and remediation steps  
   • Timeline of our communications (disclosure T–14, patch test T–7, final sign-off T–3)  
   • SHA-256 hashes of the patched driver  
7. On the agreed Patch Tuesday at 10:00 AM Pacific, publish the advisory and upload the full exploit code to our public GitHub repo under an “MSRC-coordinated” tag.  

That way, Microsoft has a defined window to deliver a solution, we jointly validate its effectiveness, and users get both patch and technical write-up simultaneously.